[2020-04-13T14:55:37.748] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 80
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T14:55:37.754] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 193
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T14:55:44.426] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 74
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T14:55:44.441] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 90
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:05.115] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 310
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:05.117] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 311
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:10.136] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 65
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:10.137] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 65
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:52.113] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 96
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:17:52.417] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 101
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:01.358] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 60
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:01.362] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 63
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:21.734] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 61
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:22.038] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 64
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:29.320] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 61
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:29.624] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 64
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:36.287] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 60
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:36.290] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 61
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:54.367] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/getCategory?t=1586762334325
request client ip: 127.0.0.1
request query: {"t":"1586762334325"}
response time: 29
response status: 200
response body: 
{"message":"成功","data":[{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181d8ea1a77c95daa48b31","name":"推荐","path":"recommend"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181e5aa1a77c95daa48b33","name":"nodejs","state":1,"path":"node"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181e67a1a77c95daa48b34","name":"摄影","state":1,"path":"photo"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181e6fa1a77c95daa48b35","name":"旅游","state":1,"path":"travel"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181e77a1a77c95daa48b36","name":"电影","state":1,"path":"film"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e181e80a1a77c95daa48b37","name":"娱乐","state":1,"path":"entertainment"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e6a0605fb773b711907175a","name":"踩坑指北","state":1,"path":"pit"},{"createTime":"2020-04-13T06:54:36.269Z","updateTime":"2020-04-13T06:54:36.269Z","_id":"5e8c4cb8f12afc9d807394b6","name":"web前端","path":"fe"}],"code":200}
***** response log end ******

[2020-04-13T15:18:54.707] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 69
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:18:54.712] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 73
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:19:03.265] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e5aa1a77c95daa48b33"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 63
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0}],"total":1},"code":200}
***** response log end ******

[2020-04-13T15:19:19.546] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 60
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:19:19.549] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 62
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:19:41.905] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e5aa1a77c95daa48b33"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 61
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0}],"total":1},"code":200}
***** response log end ******

[2020-04-13T15:19:43.671] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e67a1a77c95daa48b34"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 40
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:44.880] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e6fa1a77c95daa48b35"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 40
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:46.122] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e77a1a77c95daa48b36"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 92
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:47.350] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e80a1a77c95daa48b37"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 94
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:48.446] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e6a0605fb773b711907175a"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 40
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:49.669] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e8c4cb8f12afc9d807394b6"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 40
response status: 200
response body: 
{"message":"成功","data":{"data":[],"total":0},"code":200}
***** response log end ******

[2020-04-13T15:19:51.147] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{"category":"5e181e5aa1a77c95daa48b33"},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 61
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0}],"total":1},"code":200}
***** response log end ******

[2020-04-13T15:19:52.324] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 60
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:21:20.665] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 133
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:21:20.670] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 120
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:21:23.247] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/comment/getList
request client ip: 127.0.0.1
request body
{"where":{"artical":"5e4e4aa2b8620637839d8d3c"},"limit":10,"skip":0}
response time: 63
response status: 200
response body: 
{"message":"成功","data":{"data":[{"zan":0,"createTime":"2020-02-19T14:39:44.388Z","updateTime":"2020-02-20T09:35:47.818Z","_id":"5e4e52f3b8620637839d8d3e","artical":"5e4e4aa2b8620637839d8d3c","author":{"email":"","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"content":"第一篇文章","__v":0}],"total":1},"code":200}
***** response log end ******

[2020-04-13T15:23:01.276] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/comment/getList
request client ip: 127.0.0.1
request body
{"where":{"artical":"5e4e4aa2b8620637839d8d3c"},"limit":10,"skip":0}
response time: 70
response status: 200
response body: 
{"message":"成功","data":{"data":[{"zan":0,"createTime":"2020-02-19T14:39:44.388Z","updateTime":"2020-02-20T09:35:47.818Z","_id":"5e4e52f3b8620637839d8d3e","artical":"5e4e4aa2b8620637839d8d3c","author":{"email":"","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"content":"第一篇文章","__v":0}],"total":1},"code":200}
***** response log end ******

[2020-04-13T15:26:11.334] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586762771215
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586762771215"}
response time: 42
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":"5e4e4cf6b8620637839d8d3d","title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:40:33.772] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763633656
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763633656"}
response time: 41
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":"5e4e4cf6b8620637839d8d3d","title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:40:54.707] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763654607
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763654607"}
response time: 28
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":"5e4e4cf6b8620637839d8d3d","title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:41:17.443] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763677344
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763677344"}
response time: 27
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":2,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":"5e4e4cf6b8620637839d8d3d","title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:41:54.587] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763714454
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763714454"}
response time: 58
response status: 200
response body: 
{"message":"成功","data":{},"code":200}
***** response log end ******

[2020-04-13T15:42:08.605] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763728496
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763728496"}
response time: 34
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":4,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":"5e4e4cf6b8620637839d8d3d","title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:42:48.692] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586763768552
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586763768552"}
response time: 64
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":5,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:47:21.521] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586764041368
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586764041368"}
response time: 74
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":6,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:48:46.230] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586764126084
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586764126084"}
response time: 70
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":7,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:55:28.187] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586764528009
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586764528009"}
response time: 65
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":8,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:55:39.585] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586764539463
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586764539463"}
response time: 45
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":9,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},"code":200}
***** response log end ******

[2020-04-13T15:56:17.112] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e4e4aa2b8620637839d8d3c&t=1586764576965
request client ip: 127.0.0.1
request query: {"id":"5e4e4aa2b8620637839d8d3c","t":"1586764576965"}
response time: 70
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":10,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"email":"","avatar":"","role":2,"createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T09:10:14.316Z","_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com","password":"0e110dc5cbd9554c7894979ea0046517","__v":0},"title":"http状态码","content":"## 100开头 继续\n\n101 切换协议\n\n## 2**开头\n> （请求成功）表示成功处理了请求的状态代码。\n\n200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。\n201 （已创建） 请求成功并且服务器创建了新的资源。\n202 （已接受） 服务器已接受请求，但尚未处理。\n203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。\n204 （无内容） 服务器成功处理了请求，但没有返回任何内容。\n205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。\n206 （部分内容） 服务器成功处理了部分 GET 请求。\n\n## 3** 开头 \n>（请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。\n\n300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。\n301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。\n302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。\n304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。\n305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。\n306 暂时没有这个，已经废弃的\n307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。\n\n## 4**开头 \n>（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。\n\n400 （语法错误） 服务器不理解请求的语法。\n401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n402 （保留）没有这个，留着将来使用这个错误代码；\n403 （禁止） 服务器拒绝请求。\n404 （未找到） 服务器找不到请求的网页。\n405 （方法禁用） 禁用请求中指定的方法。\n406 （不接受） 无法使用请求的内容特性响应请求的网页。\n407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。\n408 （请求超时） 服务器等候请求时发生超时。\n409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。\n410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。\n411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。\n412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。\n415 （不支持的媒体类型） 请求的格式不受请求页面的支持。\n416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。\n417 （未满足期望值） 服务器未满足\"期望\"请求标头字段的要求。\n\n## 5**开头\n>（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。\n\n500 （服务器内部错误） 服务器遇到错误，无法完成请求。\n501 （尚未实施请求） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。\n502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。\n503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。\n504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。\n505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T15:57:16.401] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 63
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T15:57:16.416] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 93
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T16:39:45.065] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586767184822
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586767184822"}
response time: 165
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T16:39:49.807] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 109
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T16:39:49.818] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 107
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T17:23:26.415] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/user/signIn
request client ip: 127.0.0.1
request body
{"username":"rd_1985@163.com","password":"1985zrd"}
response time: 157
response status: 200
response body: 
{"message":"成功","data":{"username":"rd_1985@163.com"},"code":200}
***** response log end ******

[2020-04-13T18:21:18.370] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 245
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:21:18.509] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 87
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:21:22.940] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773282803
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773282803"}
response time: 64
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":1,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:21:33.619] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773293492
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773293492"}
response time: 56
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":2,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:22:30.852] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773350718
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773350718"}
response time: 56
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":3,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:23:05.566] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773385434
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773385434"}
response time: 57
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":4,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:23:16.488] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773396278
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773396278"}
response time: 126
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":5,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:24:23.904] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 117
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":6,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:24:23.925] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 136
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":6,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:24:24.903] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773464771
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773464771"}
response time: 50
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":6,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:25:36.086] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"where":{},"include":"author","includeword":{"username":1},"limit":10,"skip":0}
response time: 67
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":7,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:25:36.093] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getList
request client ip: 127.0.0.1
request body
{"limit":5,"order":{"star":-1},"include":"author","includeword":{"username":1}}
response time: 72
response status: 200
response body: 
{"message":"成功","data":{"data":[{"anonymous":false,"introduction":"常见的http状态码大全","imageUrl":"","visitor":11,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-02-20T09:35:33.533Z","_id":"5e4e4aa2b8620637839d8d3c","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"http状态码","category":"5e181e5aa1a77c95daa48b33","state":2,"__v":0},{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":7,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"Nuxt.js初探","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"好些年前做图片上传我都是用的form表单提交到后端，最近改用ajax提交图片，在这里做一下记录。包含在项目中使用的图片压缩。","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":1,"starList":["5e4e4999b8620637839d8d3b"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-04-07T09:03:51.534Z","_id":"5e846db5b8620637839d8d42","author":{"_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com"},"title":"web端图片上传","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0},{"anonymous":false,"introduction":"hooks","imageUrl":"","visitor":0,"commentators":0,"shared":0,"star":0,"starList":[],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:34:06.433Z","_id":"5e6a101eb8620637839d8d41","author":{"_id":"5e4e4cf6b8620637839d8d3d","username":"1623246663@qq.com"},"title":"react hooks的使用","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0}],"total":4},"code":200}
***** response log end ******

[2020-04-13T18:26:13.846] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773573410
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773573410"}
response time: 54
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":7,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:26:17.056] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773576940
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773576940"}
response time: 40
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":8,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:26:41.105] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773600971
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773600971"}
response time: 57
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":9,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

[2020-04-13T18:26:55.789] [INFO] responseLog - 
***** response log start *****
request originalUrl: /api/artical/getDetail?id=5e5ca8efb8620637839d8d40&t=1586773615685
request client ip: 127.0.0.1
request query: {"id":"5e5ca8efb8620637839d8d40","t":"1586773615685"}
response time: 47
response status: 200
response body: 
{"message":"成功","data":{"anonymous":false,"introduction":"第一次使用nuxt.js，记录一下常用的点，后期会持续改进。","imageUrl":"","visitor":10,"commentators":0,"shared":0,"star":1,"starList":["5e4e4cf6b8620637839d8d3d"],"following":[],"createTime":"2020-02-19T14:39:44.360Z","updateTime":"2020-03-12T10:19:28.739Z","_id":"5e5ca8efb8620637839d8d40","author":{"email":"","avatar":"","createTime":"2020-02-19T14:39:44.380Z","updateTime":"2020-02-20T08:55:53.246Z","_id":"5e4e4999b8620637839d8d3b","username":"rd_1985@163.com","__v":0},"title":"Nuxt.js初探","content":"> Nuxt.js是一款基于vue.js生态的开源框架。我主要用来它做服务器端渲染，它还可以用来做为静态站生成器。\n\n## 为什么要用Nuxt.js\n我们用框架（vue或react）开发一个项目，页面在最开始加载的时候，是个空页面，页面body中只有一个div，我们需要从后台获取数据，通过框架把组件生成dom填充到页面上，才能呈现最终页面。\n\n##### 所以就产生了问题：\n1. SEO不能抓取内容\n2. 获取数据阶段页面是空白的\n3. ...\n\n##### 如何解决问题呢？\nvue官方给出的解决办法是服务器端渲染（SSR）（只部分页面的话也可以用Prerendering）。SSR就是将组件渲染为服务器端的HTML字符串，直接发送到浏览器。它需要依赖vue-server-renderer，客户端和服务器端代码都需要额外处理，感觉很麻烦（可能是我没认真看）。官方推荐使用Nuxt.js。\n\n## Nuxt.js开始一个项目\n\n##### 创建一个项目\n```\nnpx create-nuxt-app <项目名>\n```\n然后就是配置信息\n\n这里需要注意的是，choose rendering mode：Universal（SSR）or Single Page App。**推荐选择Universal（SSR）**。因为Single Page App模式只被搜索引擎收录一个页面，而Universal（SSR）会收录所有的路由页面（百度查找的）。可以在`nuxt.config.js`中`mode`里找到。\n\n##### 运行\n`npm run dev`，它运行的是`nuxt`命令\n\n##### 编译打包\n`npm run build`，它运行的是`nuxt build`命令\n\n##### 生产上运行。以生产模式启动一个Web服务器 (需要先执行nuxt build)。\n`npm start`，它运行的是`nuxt start`命令\n\n## 配置页面头部信息\n在`nuxt.config.js`中配置`head`\n```\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  }\n```\n\n## 请求代理\n如果我们需要把以某个字段开始的请求，代理到另一个服务上，需要在`nuxt.config.js`中配置`proxy`。\n```\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n```\n## vuex使用\n在`store`文件夹下新建`index.js`，内容如下：\n```\nexport const state = () => ({\n  isLogin: false,\n  username: '',\n  activeIndex: 0,\n  categories: []\n})\n\nexport const mutations = {\n  setLogin (state, isLogin) {\n    state.isLogin = isLogin\n  },\n  setUsername (state, username) {\n    state.username = username\n  },\n  setActiveIndex (state, index) {\n    state.activeIndex = index\n  },\n  setCategory (state, categories) {\n    state.categories = [...categories]\n  }\n}\n```\n在组件中使用`this.$store`\n\n我把vuex的数据做了**持久化**，用的`vuex-persistedstate`。\n\n首先在`plugins`文件夹下新建`localStorage.js`，内容：\n```\nimport createPersistedState from 'vuex-persistedstate'\n\nexport default ({store}) => {\n  createPersistedState({\n    storage: window.sessionStorage\n  })(store)\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: false`。\n```\n  plugins: [\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n```\n## 路由\n写在`pages`文件夹里的`.vue`文件，默认会生成一个路由，路径为文件名。\n\n我们有时候需要全局的路由守卫，需要在`plugins`文件夹下新建`router.js`，内容：\n```\nimport globalConfig from '@/config'\nexport default ({ app }) => {\n  app.router.beforeEach((to, from, next) => {\n    if (globalConfig.cancelTokenList && globalConfig.cancelTokenList.length) {\n      globalConfig.cancelTokenList.forEach(request => {\n        request.cancel()\n      })\n    }\n    globalConfig.cancelTokenList = []\n    next()\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/router.js', ssr: true },\n  ],\n```\n通过这种方式可以获取到一些实例，如app、store...\n\n## vue扩展插件或方法\n给vue添加过滤器或使用UI框架，方法都差不多。下面以过滤器为例。\n\n在`plugins`文件夹下新建`filter.js`，内容：\n```\nimport Vue from 'vue'\nimport moment from 'moment'\n\nexport default () => {\n  Vue.filter('formatTime', function (time) {\n    return moment(time).format('YYYY-MM-DD HH:mm:ss')\n  })\n  Vue.filter('username', function (val) {\n    return val.replace(/(\\d{3})\\d{4}(\\d{}4)/, '$1****$2')\n  })\n}\n```\n然后在`nuxt.config.js`中配置`plugins`，`ssr: true`。\n```\n  plugins: [\n    { src: '@/plugins/filter.js', ssr: true },\n  ],\n```\n\n## 全局的$nuxt\n有时候我们需要在外部js中获取一些全局对象，譬如，我们需要在axios的请求拦截里，做store存储，或在返回拦截里，清除一些登录状态。这时候可以用$nuxt.$store（如果有更好的，请告诉我）,$nuxt对象得页面初始化完了才可以拿到。\n```\n$request.interceptors.response.use(response => {\n  loading.end()\n  if (response.data.code === 401) { // 未登录状态 清除用户信息\n    // 清除用户信息\n    $nuxt.$store.commit('setLogin', false)\n    $nuxt.$store.commit('setUsername', '')\n  }\n  if (response.data.code !== 200) {\n    Message({\n      message: response.data.message\n    })\n  }\n  return response.data\n}, error => {\n  // 这里返回系统错误，可以在这里做统一处理\n  loading.end()\n  Message({\n    message: '服务出错了'\n  })\n  return Promise.reject(error)\n})\n```\n## 异步数据\n`nuxt.js`提供了`asyncData`方法，让我们在**设置组件的数据之前**能异步获取或处理数据。`asyncData`方法返回的数据与`data`方法返回的数据，一并返回给当前组件。\n```\nexport default {\n  asyncData ({ params }) {\n    return axios.get(`https://my-api/posts/${params.id}`)\n      .then((res) => {\n        return { title: res.data.title }\n      })\n  }\n}\n```\n\n## 最后附上我的`nuxt.config.js`配置\n```\n\nexport default {\n  mode: 'universal',\n  /*\n  ** Headers of the page\n  */\n  head: {\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1, user-scalable=no, shrink-to-fit=no' },\n      { 'http-equiv': 'X-UA-Compatible', 'content': 'IE-edge' },\n      { hid: 'description', name: 'description', content: process.env.npm_package_description || '' }\n    ],\n    title: '春香' || process.env.npm_package_name || '',\n    link: [\n      { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' }\n    ]\n  },\n  /*\n  ** Customize the progress-bar color\n  */\n  loading: { color: '#fff' },\n  /*\n  ** Global CSS\n  */\n  css: ['normalize.css', '@/assets/font/iconfont.css', '@/assets/css/main.css', '@/assets/sass/common.scss'],\n  /*\n  ** Plugins to load before mounting the App\n  */\n  plugins: [\n    { src: '@/plugins/vue-mavon-editor', ssr: true },\n    { src: '@/plugins/element-ui', ssr: true },\n    { src: '@/plugins/router.js', ssr: true },\n    { src: '@/plugins/filter.js', ssr: true },\n    { src: '@/plugins/localStorage.js', ssr: false }\n  ],\n  /*\n  ** Nuxt.js dev-modules\n  */\n  buildModules: [\n  ],\n  /*\n  ** Nuxt.js modules\n  */\n  modules: ['@nuxtjs/axios'],\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: 'http://localhost:9000',\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': '/api'\n      }\n    }\n  },\n  /*\n  ** Build configuration\n  */\n  build: {\n    babel: {\n      plugins: [\n        [\"component\", {\"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\"}]\n      ]\n    },\n    /*\n    ** You can extend webpack config here\n    */\n    extend (config, ctx) {\n    }\n  }\n}\n\n```\n","category":"5e181e2ca1a77c95daa48b32","state":2,"__v":0,"isAlreadyStar":false},"code":200}
***** response log end ******

